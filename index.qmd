---
title: Options
format: 
  revealjs: 
    theme: serif
    navigation-mode: vertical
    controls-layout: bottom-right
    slide-number: true
    chalkboard: true
---

# Definition

Options are financial derivatives that give the buyer the right, but not the obligation, to buy or sell an underlying asset at a specified price on or before a specified date. 

## Types of Options

- Underlying type: futures options, futures spread options, equity options, fx options, interest rate options

- Payout Type: call, put, exotic

- Settlement Type: cash settled, delivery

- Exercise Time: European, American, Bermudan 

# Pricing Basics

- How to determine option value?

- Understanding option greeks

## Option Specifications

In order to understand vanilla options pricing, we need to look at the following features:

1. Strike price
    - The specified price at which the underlying asset can be bought or sold

2. Time to expiration
    - The amount of time remaining until the option expires

## Market data

1. Price of the underlying asset

2. Volatility of the underlying asset
    - How much the price of the underlying asset is expected to fluctuate

These factors are used to calculate the theoretical value of an option using a mathematical model such as the Black-Scholes model. However, the actual price of an option may also be influenced by supply and demand in the market.

## Example

- Strike: 100
- Time to expiration: 1 year
- Interest rate: 0%
- Volatility: 30%

```{python}
from IPython.display import display, HTML
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px
import plotly.io as pio
from plotly.subplots import make_subplots
# from IPython.display import display, HTML

pio.templates.default = "ggplot2"

# Define the parameters for the call option
K = 100     # option strike price
r = 0.0    # risk-free interest rate
T = 1       # time to maturity (in years)

# Define a range of underlying prices to plot
S_range = np.linspace(1, 200, 200)

# Define two different volatilities to plot
sigma1 = 0.01
sigma2 = 0.3

# Calculate the call option prices for each underlying price and volatility
d1_1 = (np.log(S_range/K) + (r + 0.5*sigma1**2)*T) / (sigma1*np.sqrt(T))
d2_1 = d1_1 - sigma1*np.sqrt(T)
call_price_1 = S_range*norm.cdf(d1_1) - K*np.exp(-r*T)*norm.cdf(d2_1)

d1_2 = (np.log(S_range/K) + (r + 0.5*sigma2**2)*T) / (sigma2*np.sqrt(T))
d2_2 = d1_2 - sigma2*np.sqrt(T)
call_price_2 = S_range*norm.cdf(d1_2) - K*np.exp(-r*T)*norm.cdf(d2_2)
call_delta = norm.cdf(d1_2)

put_price_1 = -S_range*norm.cdf(-d1_1) + K*np.exp(-r*T)*norm.cdf(-d2_1)
put_price_2 = -S_range*norm.cdf(-d1_2) + K*np.exp(-r*T)*norm.cdf(-d2_2)
put_delta = -norm.cdf(-d1_2)

# Calculate the gamma and theta values for a range of underlying asset prices
gamma = np.exp(-r*T) * np.exp(-d1_2**2/2) / \
    (S_range * sigma2 * np.sqrt(2*np.pi*T))
theta = (-(S_range * np.exp(-d1_2**2/2) * sigma2 / (2 * np.sqrt(2*np.pi*T)))
         * np.exp(-r*T) - r * K * np.exp(-r*T) * norm.cdf(-d2_2)) / 365.0

# Combine the data into a Pandas DataFrame
df = pd.DataFrame({
                  "Underlying Price": S_range,
                  "Call Payoff": call_price_1,
                  "Put Payoff": put_price_1,
                  "Call Price": call_price_2,
                  "Put Price": put_price_2,
                  "Call Delta": call_delta,
                  "Put Delta": put_delta,
                  "Gamma": gamma,
                  "Theta": theta
                  }).set_index('Underlying Price').round(8)


def optionCharts(df=df, title="", ytitle1="", ytitle2="", pos="", vis=""):
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    lines = df.plot(backend='plotly')
    # Add traces
    keys = df.columns
    ypos = [pos in k for k in keys]
    visible = [True if (vis in k) else 'legendonly' for k in keys]
    for i in range(len(ypos)):
        lines.data[i].update(visible=visible[i])
        fig.add_trace(
            lines.data[i],
            secondary_y=ypos[i],
        )
    # Add figure title
    fig.update_layout(
        title_text=title,
        # template = 'ggplot2'
    )
    # Set x-axis title
    fig.update_xaxes(title_text="Underlying Price")
    # Set y-axes titles
    fig.update_yaxes(title_text=ytitle1, secondary_y=False)
    fig.update_yaxes(title_text=ytitle2, secondary_y=True)
    return fig
```

## Option Price and Payoff Charts 

```{python}
title="Option Payoff and Price vs Underlying Price"
ytitle1=""
ytitle2=""
keys = ["Call Payoff",
        "Put Payoff",
        "Call Price",
        "Put Price" ]
fig = optionCharts(df=df[keys], title=title, ytitle1="", ytitle2="", pos = "Price", vis="Call")
fig.show()
```

## Numerical Result 
<!-- {.scrollable .smaller}   -->

<!-- {visibility="hidden"} -->

```{python}
output = (
    df
    .reset_index()
    .style
    .hide(axis='index')
    .format(precision=2,
            formatter={
                # 'Call Payoff': "{:.0f}",
                # 'Put Payoff': "{:.0f}",
                'Gamma': "{:.4f}",
                'Theta': "{:.4f}",
            })
    .format_index(precision=2)
    .set_sticky(axis=1)
    .set_table_styles([
        {'selector': '', 'props': 'font-size:0.7em; z-index:1'},
        {'selector': 'thead tr:nth-child(1) th', 
            'props': 'background-color:LightGrey;'}
        ], overwrite = False )
    )

display(HTML("<div style='height: 15em;'>" +
             output.to_html() +
             "</div>"))
```


## Greeks

- Delta: measures the sensitivity of an option's price to changes in the underlying asset's *price*. 

::: {.incremental}

- Gamma: measures the rate of change in an option's *delta* to changes in the underlying asset's *price*.

- Vega: measures the sensitivity of an option's price to changes in the *volatility* of the underlying asset. 

- Theta: measures the sensitivity of an option's price to the passage of *time*. 

- Rho: measures the sensitivity of an option's price to changes in the *interest* rate. 

::: 

##  Delta Charts
```{python}
title_text = "Option Price and Delta vs Underlying Price"
keys = [
    # "Call Payoff",
    # "Put Payoff",
    "Call Price",
    "Put Price",
    "Call Delta",
    "Put Delta",
    #   "Gamma",
    #   "Theta",
]
fig = optionCharts(df=df[keys], title=title_text,
                   ytitle1="Price", pos="Delta", ytitle2="Delta", vis="Call")
fig.show()
```

##  Gamma and Theta Charts

```{python}
title_text = "Greeks vs Underlying Price"
keys = [
    # "Call Payoff",
    # "Put Payoff",
    # "Call Price",
    # "Put Price",
    "Call Delta",
    #   "Put Delta",
    "Gamma",
    "Theta",
]
fig = optionCharts(df=df[keys], title=title_text,
                   ytitle1="Gamma/Theta", pos="Delta", ytitle2="Delta", vis="Call")
fig.show()

```

## Hedging

Hedging reduces exposure for possible future scenarios. Price changes are the main risk factor.

- Static hedge: hedged portfolio's risk profile does not change materially over possible future scenarios. 

    - futures vs physical exposure.

    - put-call parity: call - put = underlying - strike

- Dynamic hedge: delta hedging and re-hedging as required

    - futures option vs futures.

## Dynamic Hedging 

- Positive gamma lead to natural *buy low sell high* re-hedging trades and produce hedging profit. 

- Option loses time value as time to expiration reduces.

- Gamma vs Theta trade-off

- Option increase in value as volatility/uncertainty increases.

- Implied volatility vs realized volatility

## Benefits 

- Payoff asymmetry: limited loss from long options 
 
- Leverage: option premium is a fraction of underlying asset price

- Express view of any market condition: bull, bear, range bounding

## Risks

- Unlimited loss

- Margin calls

- Complexity

# WTI Option

- WTI (West Texas Intermediate, a US light sweet crude oil blend) futures provide direct crude oil exposure

- Hedge against adverse oil price moves or speculate

- Price discovery 

- American style call/put

::: footer
Source [CME WTI Option Specs ](https://www.cmegroup.com/markets/energy/crude-oil/light-sweet-crude.contractSpecs.options.html)
:::

```{python}

# source https://www.cmegroup.com/ftp/pub/settle/
urls = ["cbt.settle.s.csv.zip", "nymex.settle.s.csv.zip"]
dfall = pd.concat(
    [pd.read_csv(x) for x in urls],
    ignore_index=True)


def plotoption(sym):
    df = dfall.query("Sym == @sym")
    df['Contract'] = pd.to_datetime(
        df['MMY'], format="%Y%m").dt.strftime("%b-%y")
    df['PutCall'] = pd.Categorical.from_codes(df['PutCall'].fillna(
        2).astype('int'), categories=["Put", "Call", "Future"])
    fig = px.scatter(df, x="StrkPx", y="SettlePrice",
                     animation_frame="Contract",
                     animation_group="StrkPx",
                     size="PrevDayOI",
                     color='PutCall',
                     hover_name="Contract",
                     #    size_max=32,
                     ).update_traces(marker_sizemin=2)
    fig.update_layout(
        xaxis_tickformat='.2f',
        yaxis_tickformat='.2f',
    )
    return fig


def plotfuture(sym):
    df = dfall.query("Sym == @sym")
    df['Contract'] = pd.to_datetime(df['MMY'], format="%Y%m")
    df['ContractMonth']  =  df['Contract'].dt.strftime("%b-%y")
    fig = make_subplots(rows=2, cols=1, row_heights=[0.8, 0.2], shared_xaxes=True,
                        subplot_titles=("Price and Volume", "Open Interest vs Trading Volume"))
    fig1 = px.scatter(df,
                      x="Contract",
                      y="SettlePrice",
                      size="PrevDayVol",
                      color="Sym",
                      hover_name="ContractMonth",
                      hover_data=["PrevDayOI"],
                      size_max=20,
                      # color_continuous_scale='bluered'
                      color_discrete_sequence=px.colors.qualitative.G10
                      ).update_traces(marker_sizemin=2,                      marker_coloraxis=None,
                      mode='lines+markers')
    fig.add_trace(fig1.data[0], row=1, col=1)
    bars = df[['Contract', 'PrevDayOI', 'PrevDayVol']].set_index(
        'Contract').plot.bar(backend='plotly')
    fig.add_trace( bars.data[0], row=2, col=1)
    fig.add_trace(bars.data[1], row=2, col=1 )
    fig.update_xaxes(
        # dtick="M6",
        tickformat="%b-%y",
        tickangle=45,
        minor=dict(dtick="M1"))
    fig['layout']['yaxis2']['title'] = 'Lots'
    return fig

```

## Crude Oil Futures Settlements

```{python}
fig = plotfuture('CL')
fig.show()
```

## Crude Oil Futures Option Settlements
```{python}
fig = plotoption('LO')
fig.show()
```

# Natual Gas Option

## Natual Gas Futures Settlements

```{python}
fig = plotfuture('NG')
fig.show()
```

## Natural Gas Futures Option Settlements
```{python}
fig = plotoption('ON')
fig.show()

```

# Corn Option

- Deliverable into Corn Futures, American style call/put

- Listed Contracts:
    - Monthly contracts listed for 4 consecutive months and:
    - 3 monthly contracts of Mar listed in July
    - 3 monthly contracts of May listed in September
    - 3 monthly contracts of Sep listed in March
    - 7 monthly contracts of Jul and Dec listed in November

::: footer
Source [CME Corn Option Specs ](https://www.cmegroup.com/markets/agriculture/grains/corn.contractSpecs.options.html)
:::


## Corn  Futures Settlements

```{python}
fig = plotfuture('ZC')
fig.show()
```

## Corn Futures Option Settlements
```{python}
fig = plotoption( sym = 'OZC')
fig.show()
```

# Soybean Option

## Soybean Futures Settlements

```{python}
fig = plotfuture('ZS')
fig.show()
```

## Soybean Futures Option Settlements
```{python}
fig = plotoption('OZS')
fig.show()

```

## Live Calculator

![](option calc.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/options-calculator.html)
:::

# Strategies

Combinations of various options and underlying asset can be used to meet different payoff requirements

## Common Strategies

- covered calls 

- call spreads

- straddle/strangle 

## Covered call example

![](wti covercall.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/strategy-simulator.html)
:::

# Trading

- Who trades options? 
- How to trade options?  

## Market mechanism

   - Listed vs OTC market

   - Market Participants 

   - Margin Requirements

   - Exercising / Assignments 

## Open Interest

![](wti oi.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/options-open-interest-profile.html)
:::

## Commitments of Traders Report

![](wti cot.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/commitment-of-traders.html),
[CFTC](https://www.cftc.gov/MarketReports/CommitmentsofTraders/index.htm)
:::

## 

Producer/Merchant/Processor/User  
: A “producer/merchant/processor/user” is an entity that predominantly engages in the production, processing, packing or handling of a physical commodity and uses the futures markets to manage or hedge risks associated with those activities. 

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 

## 

Swap Dealer 
: A “swap dealer” is an entity that deals primarily in swaps for a commodity and uses the futures markets to manage or hedge the risk associated with those swaps transactions.  The swap dealer’s counterparties may be speculative traders, like hedge funds, or traditional commercial clients that are managing risk arising from their dealings in the physical commodity.  

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 

## 

Money Manager 
: A “money manager,” for the purpose of this report, is a registered commodity trading advisor (CTA); a registered commodity pool operator (CPO); or an unregistered fund identified by CFTC.7 These traders are engaged in managing and conducting organized futures trading on behalf of clients.

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 


# Conclusion

- What is option
- Option pricing factors
- Benefits and risk
- Option market


