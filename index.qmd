---
title: Options
format: 
  revealjs: 
    theme: serif
    navigation-mode: vertical
    controls-layout: bottom-right
    slide-number: true
    chalkboard: true
---

# Definition

Options are financial derivatives that give the buyer the right, but not the obligation, to buy or sell an underlying asset at a specified price on or before a specified date. 

## Types of Options

- Underlying type: futures options, futures spread options, equity options, fx options, interest rate options

- Payout Type: call, put, exotic

- Settlement Type: cash settled, delivery

- Exercise Time: European, American, Bermudan 

# Pricing

How to determine option value?

## Option Specs

In order to understand options pricing, we need to look at the following factors:

1. Strike price
    - The specified price at which the underlying asset can be bought or sold

2. Time to expiration
    - The amount of time remaining until the option expires

## Market data

1. Price of the underlying asset

2. Volatility of the underlying asset
    - How much the price of the underlying asset is expected to fluctuate

These factors are used to calculate the theoretical value of an option using a mathematical model such as the Black-Scholes model. However, the actual price of an option may also be influenced by supply and demand in the market.

## Call Option Price Charts

```{python}
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px

# Define the parameters for the call option
S = 100     # current underlying price
K = 100     # option strike price
r = 0.0    # risk-free interest rate
T = 1       # time to maturity (in years)

# Define a range of underlying prices to plot
S_range = np.linspace(1, 200, 100)

# Define two different volatilities to plot
sigma1 = 0.01
sigma2 = 0.3

# Calculate the call option prices for each underlying price and volatility
d1_1 = (np.log(S_range/K) + (r + 0.5*sigma1**2)*T) / (sigma1*np.sqrt(T))
d2_1 = d1_1 - sigma1*np.sqrt(T)
call_price_1 = S_range*norm.cdf(d1_1) - K*np.exp(-r*T)*norm.cdf(d2_1)

d1_2 = (np.log(S_range/K) + (r + 0.5*sigma2**2)*T) / (sigma2*np.sqrt(T))
d2_2 = d1_2 - sigma2*np.sqrt(T)
call_price_2 = S_range*norm.cdf(d1_2) - K*np.exp(-r*T)*norm.cdf(d2_2)

# Combine the data into a Pandas DataFrame
data = np.column_stack((S_range, call_price_1, call_price_2))
df = pd.DataFrame(data, columns=[
                  "Underlying Price", f"Volatility = {sigma1:.2%}", f"Volatility = {sigma2:.2%}"])

# Melt the DataFrame to create the long-form data required by Plotly Express
df_melted = df.melt(id_vars=["Underlying Price"],
                    var_name="Volatility", value_name="Call Option Price")

# Create the Plotly Express figure
fig = px.line(df_melted, x="Underlying Price", y="Call Option Price", color="Volatility",
              title="Option Price vs Underlying Price")
# fig.update_xaxes(range=[0, 150])
# fig.update_yaxes(range=[0, 150])
# fig.update_xaxes(scaleanchor="y", scaleratio=1)
# fig.update_yaxes(scaleanchor="x", scaleratio=1)
# Show the figure
fig.show()
```

## Put Option Price Charts

```{python}
# Calculate the call option prices for each underlying price and volatility
d1_1 = (np.log(S_range/K) + (r + 0.5*sigma1**2)*T) / (sigma1*np.sqrt(T))
d2_1 = d1_1 - sigma1*np.sqrt(T)
price_1 = -S_range*norm.cdf(-d1_1) + K*np.exp(-r*T)*norm.cdf(-d2_1)

d1_2 = (np.log(S_range/K) + (r + 0.5*sigma2**2)*T) / (sigma2*np.sqrt(T))
d2_2 = d1_2 - sigma2*np.sqrt(T)
price_2 = -S_range*norm.cdf(-d1_2) + K*np.exp(-r*T)*norm.cdf(-d2_2)

# Combine the data into a Pandas DataFrame
data = np.column_stack((S_range, price_1, price_2))
df = pd.DataFrame(data, columns=[
                  "Underlying Price", f"Volatility = {sigma1:.2%}", f"Volatility = {sigma2:.2%}"])

# Melt the DataFrame to create the long-form data required by Plotly Express
df_melted = df.melt(id_vars=["Underlying Price"],
                    var_name="Volatility", value_name="Put Option Price")

# Create the Plotly Express figure
fig = px.line(df_melted, x="Underlying Price", y="Put Option Price", color="Volatility",
              title="Option Price vs Underlying Price")
# fig.update_xaxes(range=[0, 150])
# fig.update_yaxes(range=[0, 150])
# fig.update_xaxes(scaleanchor="y", scaleratio=1)
# fig.update_yaxes(scaleanchor="x", scaleratio=1)
# Show the figure
fig.show()
```

## Greeks

::: {.incremental}

- Delta: measures the sensitivity of an option's price to changes in the underlying asset's *price*. 

- Gamma: measures the rate of change in an option's *delta*. 

- Vega: measures the sensitivity of an option's price to changes in the *volatility* of the underlying asset. 

- Theta: measures the sensitivity of an option's price to the passage of *time*. 

- Rho: measures the sensitivity of an option's price to changes in the *interest* rate. 

::: 

## WTI Option

- WTI (West Texas Intermediate, a US light sweet crude oil blend) futures provide direct crude oil exposure

- Hedge against adverse oil price moves or speculate

- Price discovery 

- American style call/put

::: footer
Source [CME WTI Option Specs ](https://www.cmegroup.com/markets/energy/crude-oil/light-sweet-crude.contractSpecs.options.html)
:::

```{python}
import numpy as np
import pandas as pd
from scipy.stats import norm
import plotly.express as px

# source https://www.cmegroup.com/ftp/pub/settle/
urls = ["cbt.settle.s.csv.zip", "nymex.settle.s.csv.zip"]
dfall = pd.concat(
        [ pd.read_csv(x) for x in urls], 
        ignore_index=True)
def plotoption( sym ):
    df = dfall.query("Sym == @sym")
    df['Contract'] = pd.to_datetime(df['MMY'], format="%Y%m").dt.strftime("%b-%y")
    df['PutCall']= pd.Categorical.from_codes(df['PutCall'].fillna(2).astype('int'), categories=["Put", "Call", "Future"])
    fig = px.scatter(df, x="StrkPx", y="SettlePrice", 
            animation_frame="Contract", 
            animation_group="StrkPx",
            size="PrevDayOI", 
            color='PutCall', 
            hover_name="Contract", 
            #    size_max=32,            
            ).update_traces(marker_sizemin=2)
    fig.update_layout(
        xaxis_tickformat = '.2f',
        yaxis_tickformat = '.2f',
        )
    return fig

def plotfuture( sym ):
    df = dfall.query("Sym == @sym")
    df['Contract'] = pd.to_datetime(df['MMY'], format="%Y%m")
    fig = px.scatter(df, 
        x="Contract", 
        y="SettlePrice", 
        size="PrevDayOI", 
        color="PrevDayOI", 
        # size_max=0,
        color_continuous_scale='bluered'
        ).update_traces(marker_sizemin=2)
    fig.update_xaxes(
        # dtick="M6",
        tickformat="%b-%y",
        tickangle=45,
        minor=dict(dtick="M1"))
    return fig

```

## Crude Oil Futures Settlements

```{python}
fig = plotfuture('CL')
fig.show()
```

## Crude Oil Futures Option Settlements
```{python}
fig = plotoption('LO')
fig.show()

```
## Corn Futures Option Settlements
```{python}
fig = plotoption( sym = 'OZC')
fig.show()
```

## Soybean Futures Settlements

```{python}
fig = plotfuture('ZS')
fig.show()
```

## Soybean Futures Option Settlements
```{python}
fig = plotoption('OZS')
fig.show()

```

## Live Calculator

![](option calc.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/options-calculator.html)
:::

## Benefits 

- Payoff asymmetry: limited loss from long options 
 
- Leverage: option premium is a fraction of underlying asset price

- Express view of any market condition: bull, bear, range bounding

## Risks

- Unlimited loss

- Margin calls

- Complexity

# Strategies

Combinations of various options and underlying asset can be used to meet different payff requirements

## Common Strategies

- covered calls 

- call spreads

- straddle/strangle 

## Covered call example

![](wti covercall.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/strategy-simulator.html)
:::

# Trading

- Who trades options? 
- How to trade options?  

## Market mechanism

   - Market Participants 

   - Margin Requirements

   - Exercising / Assignments 

## Open Interest

![](wti oi.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/options-open-interest-profile.html)
:::

## Commitments of Traders Report

![](wti cot.png)

::: footer
Source [CME](https://www.cmegroup.com/tools-information/quikstrike/commitment-of-traders.html),
[CFTC](https://www.cftc.gov/MarketReports/CommitmentsofTraders/index.htm)
:::

## 

Producer/Merchant/Processor/User  
: A “producer/merchant/processor/user” is an entity that predominantly engages in the production, processing, packing or handling of a physical commodity and uses the futures markets to manage or hedge risks associated with those activities. 

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 

## 

Swap Dealer 
: A “swap dealer” is an entity that deals primarily in swaps for a commodity and uses the futures markets to manage or hedge the risk associated with those swaps transactions.  The swap dealer’s counterparties may be speculative traders, like hedge funds, or traditional commercial clients that are managing risk arising from their dealings in the physical commodity.  

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 

## 

Money Manager 
: A “money manager,” for the purpose of this report, is a registered commodity trading advisor (CTA); a registered commodity pool operator (CPO); or an unregistered fund identified by CFTC.7 These traders are engaged in managing and conducting organized futures trading on behalf of clients.

::: footer
Source <https://www.cftc.gov/idc/groups/public/@commitmentsoftraders/documents/file/tfmexplanatorynotes.pdf>
::: 


# Conclusion

- What is option
- Option pricing factors
- benefits and risk
- Option market


